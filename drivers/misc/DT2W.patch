From c63501dea642789431487f266781e4e116dc2d00 Mon Sep 17 00:00:00 2001
diff --git a/drivers/input/touchscreen/fts_521/fts.c b/drivers/input/touchscreen/fts_521/fts.c
index bb173c32f0a9..e50c7b84b288 100644
--- a/drivers/input/touchscreen/fts_521/fts.c
+++ b/drivers/input/touchscreen/fts_521/fts.c
@@ -78,6 +78,8 @@
 #include "./../ndt_core.h"
 #endif
 
+#define PROC_SYMLINK_PATH "touchpanel"
+
 /**
  * Event handler installer helpers
  */
@@ -2235,6 +2237,800 @@ static ssize_t fts_grip_enable_store(struct device *dev,
 	if (ret < OK) {
 		logError(1, "%s %s: write failed...ERROR %08X !\n", tag,
 			 __func__, ret);
+		return -EPERM;
+	}
+	return count;
+}
+
+static ssize_t fts_fod_status_show(struct device *dev,
+				    struct device_attribute *attr, char *buf)
+{
+	struct fts_ts_info *info = dev_get_drvdata(dev);
+
+	return snprintf(buf, TSP_BUF_SIZE, "%d\n", info->fod_status);
+}
+
+static ssize_t fts_fod_status_store(struct device *dev,
+				     struct device_attribute *attr,
+				     const char *buf, size_t count)
+{
+	struct fts_ts_info *info = dev_get_drvdata(dev);
+
+	logError(1, " %s %s,buf:%s,count:%zu\n", tag, __func__, buf, count);
+	sscanf(buf, "%u", &info->fod_status);
+	return count;
+}
+
+static ssize_t fts_gesture_enable_store(struct device *dev,
+					struct device_attribute *attr,
+					const char *buf, size_t count)
+{
+	unsigned int input = 0;
+	static const char *fts_gesture_on = "01 20";
+	static const char *fts_gesture_off = "00 20";
+	struct fts_ts_info *info = dev_get_drvdata(dev);
+	char *gesture_result;
+	int size = 6 * 2 + 1;
+	if (sscanf(buf, "%u", &input) != 1)
+		return -EINVAL;
+
+	if (input == 1) {
+		gesture_result = (u8 *) kzalloc(size, GFP_KERNEL);
+		fts_gesture_mask_store(info->dev, NULL,
+				fts_gesture_on, strlen(fts_gesture_on));
+		fts_gesture_mask_show(info->dev, NULL,
+				gesture_result);
+	} else {
+		gesture_result = (u8 *) kzalloc(size, GFP_KERNEL);
+		fts_gesture_mask_store(info->dev, NULL,
+				fts_gesture_off, strlen(fts_gesture_off));
+		fts_gesture_mask_show(info->dev, NULL,
+				gesture_result);
+	}
+
+	if (strncmp("{ 00000000 }", gesture_result, size - 1))
+		logError(1, "%s %s: store gesture mask error\n", tag, __func__);
+
+	kfree(gesture_result);
+	gesture_result = NULL;
+
+	return count;
+}
+
+#ifdef CONFIG_TOUCHSCREEN_XIAOMI_TOUCHFEATURE
+static struct xiaomi_touch_interface xiaomi_touch_interfaces;
+#ifdef CONFIG_TOUCHSCREEN_XIAOMI_TOUCHFEATURE_GAMEMODE
+static ssize_t fts_touchgame_show(struct device *dev,
+				    struct device_attribute *attr, char *buf)
+{
+	u8 get_value[7] = {0x0,};
+	u8 get_cmd[2] = {0xc1, 0x05};
+	u8 grip_rcmd[2] = {0xc1, 0x08};
+	u8 grip_value[7] = {0x0,};
+	int ret;
+
+	ret = fts_writeRead(get_cmd, sizeof(get_cmd) / sizeof(u8), get_value,
+				 sizeof(get_value) / sizeof(u8));
+	if (ret < OK) {
+		logError(1,
+			 "%s %s: error while reading touchmode data ERROR %08X\n",
+			 tag, __func__, ret);
+	}
+	ret = fts_writeRead(grip_rcmd, sizeof(grip_rcmd) / sizeof(u8), grip_value,
+			     sizeof(grip_value) / sizeof(u8));
+	if (ret < OK) {
+		logError(1,
+			 "%s %s: error while reading edge filter data ERROR %08X\n",
+			 tag, __func__, ret);
+	}
+
+	return 	snprintf(buf, PAGE_SIZE, "game mode:%d,%d,%d,%d,%d,%d,%d\n"
+		"grip mode:0x%x, 0x%x, 0x%x, %d, %d, %d, %d\n",
+		get_value[0], get_value[1], get_value[2], get_value[3],
+		get_value[4], get_value[5], get_value[6],
+		grip_value[0], grip_value[1], grip_value[2], grip_value[3],
+		grip_value[4], grip_value[5], grip_value[6]);
+}
+
+static int fts_read_touchmode_data(void)
+{
+	int ret = 0;
+	u8 get_cmd[2] = {0xc1, 0x05};
+	u8 get_value[Touch_Mode_NUM] = {0x0,};
+	u8 grip_cmd[2] = {0xc1, 0x08};
+	u8 grip_value[Touch_Mode_NUM] = {0x0,};
+	int readBytes = 7;
+	int i;
+
+	ret = fts_writeRead(get_cmd, sizeof(get_cmd) / sizeof(u8), get_value,
+			     readBytes);
+	if (ret < OK) {
+		logError(1,
+			 "%s %s: error while reading touchmode data ERROR %08X\n",
+			 tag, __func__, ret);
+		return -EINVAL;
+	}
+	ret = fts_writeRead(grip_cmd, sizeof(grip_cmd) / sizeof(u8), grip_value,
+			     readBytes);
+	if (ret < OK) {
+		logError(1,
+			 "%s %s: error while reading edge filter data ERROR %08X\n",
+			 tag, __func__, ret);
+		return -EINVAL;
+	}
+
+	for (i = 0; i < Touch_Mode_NUM; i++) {
+		if (i == Touch_Edge_Filter)
+			xiaomi_touch_interfaces.touch_mode[i][GET_CUR_VALUE] = grip_value[0];
+		else
+			xiaomi_touch_interfaces.touch_mode[i][GET_CUR_VALUE] = get_value[i];
+	}
+
+	for (i = 0; i < 7; i++) {
+		xiaomi_touch_interfaces.touch_edge[i] = grip_value[i];
+	}
+
+	logError(1,
+		"%s %s: game_mode:%d, active_mode:%d, up_threshold:%d, landlock:%d, wgh:%d, %d, %d\n",
+		tag, __func__, get_value[0], get_value[1], get_value[2], get_value[3],
+		get_value[4], get_value[5], get_value[6]);
+	logError(1,
+		"%s %s: grip:0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x\n",
+		tag, __func__, grip_value[0], grip_value[1], grip_value[2], grip_value[3],
+		grip_value[4], grip_value[5], grip_value[6]);
+
+	return ret;
+}
+
+static void fts_init_touchmode_data(void)
+{
+	int i;
+	struct fts_hw_platform_data *bdata = NULL;
+
+	if (!fts_info)
+		return;
+	else
+		bdata = fts_info->board;
+
+	/* default value should equl the first initial value */
+	for (i = 0; i < Touch_Mode_NUM; i++) {
+		xiaomi_touch_interfaces.touch_mode[i][GET_DEF_VALUE] =
+			xiaomi_touch_interfaces.touch_mode[i][GET_CUR_VALUE];
+		xiaomi_touch_interfaces.touch_mode[i][SET_CUR_VALUE] =
+			xiaomi_touch_interfaces.touch_mode[i][GET_CUR_VALUE];
+	}
+	/* Touch Game Mode Switch */
+	xiaomi_touch_interfaces.touch_mode[Touch_Game_Mode][GET_MAX_VALUE] = 1;
+	xiaomi_touch_interfaces.touch_mode[Touch_Game_Mode][GET_MIN_VALUE] = 0;
+	xiaomi_touch_interfaces.touch_mode[Touch_Game_Mode][GET_DEF_VALUE] = 0;
+
+	/* Acitve Mode */
+	xiaomi_touch_interfaces.touch_mode[Touch_Active_MODE][GET_MAX_VALUE] = 1;
+	xiaomi_touch_interfaces.touch_mode[Touch_Active_MODE][GET_MIN_VALUE] = 0;
+	xiaomi_touch_interfaces.touch_mode[Touch_Active_MODE][GET_DEF_VALUE] = 0;
+
+	/* finger hysteresis */
+	xiaomi_touch_interfaces.touch_mode[Touch_UP_THRESHOLD][GET_DEF_VALUE] = bdata->touch_up_threshold_def;
+	xiaomi_touch_interfaces.touch_mode[Touch_UP_THRESHOLD][SET_CUR_VALUE] = bdata->touch_up_threshold_def;
+	xiaomi_touch_interfaces.touch_mode[Touch_UP_THRESHOLD][GET_CUR_VALUE] = bdata->touch_up_threshold_def;
+	xiaomi_touch_interfaces.touch_mode[Touch_UP_THRESHOLD][GET_MAX_VALUE] = bdata->touch_up_threshold_max;
+	xiaomi_touch_interfaces.touch_mode[Touch_UP_THRESHOLD][GET_MIN_VALUE] = bdata->touch_up_threshold_min;
+
+	/*  Tolerance */
+	xiaomi_touch_interfaces.touch_mode[Touch_Tolerance][GET_DEF_VALUE] = bdata->touch_tolerance_def;
+	xiaomi_touch_interfaces.touch_mode[Touch_Tolerance][GET_MAX_VALUE] = bdata->touch_tolerance_max;
+	xiaomi_touch_interfaces.touch_mode[Touch_Tolerance][GET_MIN_VALUE] = bdata->touch_tolerance_min;
+	xiaomi_touch_interfaces.touch_mode[Touch_Tolerance][SET_CUR_VALUE] = bdata->touch_tolerance_def;
+	xiaomi_touch_interfaces.touch_mode[Touch_Tolerance][GET_CUR_VALUE] = bdata->touch_tolerance_def;
+
+	/*	Wgh Min */
+	xiaomi_touch_interfaces.touch_mode[Touch_Wgh_Min][GET_DEF_VALUE] = 1;
+	xiaomi_touch_interfaces.touch_mode[Touch_Wgh_Min][GET_CUR_VALUE] = 1;
+	xiaomi_touch_interfaces.touch_mode[Touch_Wgh_Min][SET_CUR_VALUE] = 1;
+	xiaomi_touch_interfaces.touch_mode[Touch_Wgh_Min][GET_MAX_VALUE] = 15;
+	xiaomi_touch_interfaces.touch_mode[Touch_Wgh_Min][GET_MIN_VALUE] = 0;
+
+	/*	Wgh Max */
+	xiaomi_touch_interfaces.touch_mode[Touch_Wgh_Max][GET_DEF_VALUE] = 5;
+	xiaomi_touch_interfaces.touch_mode[Touch_Wgh_Max][GET_CUR_VALUE] = 5;
+	xiaomi_touch_interfaces.touch_mode[Touch_Wgh_Max][SET_CUR_VALUE] = 5;
+	xiaomi_touch_interfaces.touch_mode[Touch_Wgh_Max][GET_MAX_VALUE] = 15;
+	xiaomi_touch_interfaces.touch_mode[Touch_Wgh_Max][GET_MIN_VALUE] = 0;
+
+	/*	Wgh Step */
+	xiaomi_touch_interfaces.touch_mode[Touch_Wgh_Step][GET_DEF_VALUE] = 1;
+	xiaomi_touch_interfaces.touch_mode[Touch_Wgh_Step][GET_CUR_VALUE] = 1;
+	xiaomi_touch_interfaces.touch_mode[Touch_Wgh_Step][SET_CUR_VALUE] = 1;
+	xiaomi_touch_interfaces.touch_mode[Touch_Wgh_Step][GET_MAX_VALUE] = 2;
+	xiaomi_touch_interfaces.touch_mode[Touch_Wgh_Step][GET_MIN_VALUE] = 0;
+
+	/*	edge filter */
+	xiaomi_touch_interfaces.touch_mode[Touch_Edge_Filter][GET_MAX_VALUE] = 3;
+	xiaomi_touch_interfaces.touch_mode[Touch_Edge_Filter][GET_MIN_VALUE] = 0;
+	xiaomi_touch_interfaces.touch_mode[Touch_Edge_Filter][GET_DEF_VALUE] = 2;
+	xiaomi_touch_interfaces.touch_mode[Touch_Edge_Filter][SET_CUR_VALUE] = 2;
+	xiaomi_touch_interfaces.touch_mode[Touch_Edge_Filter][GET_CUR_VALUE] = 2;
+
+	/*	Orientation */
+	xiaomi_touch_interfaces.touch_mode[Touch_Panel_Orientation][GET_MAX_VALUE] = 3;
+	xiaomi_touch_interfaces.touch_mode[Touch_Panel_Orientation][GET_MIN_VALUE] = 0;
+	xiaomi_touch_interfaces.touch_mode[Touch_Panel_Orientation][GET_DEF_VALUE] = 0;
+	xiaomi_touch_interfaces.touch_mode[Touch_Panel_Orientation][SET_CUR_VALUE] = 0;
+	xiaomi_touch_interfaces.touch_mode[Touch_Panel_Orientation][GET_CUR_VALUE] = 0;
+
+	for (i = 0; i < Touch_Mode_NUM; i++) {
+		logError(1,
+			 "%s %s: mode:%d, set cur:%d, get cur:%d, def:%d min:%d max:%d\n",
+			 tag, __func__,
+			i,
+			xiaomi_touch_interfaces.touch_mode[i][SET_CUR_VALUE],
+			xiaomi_touch_interfaces.touch_mode[i][GET_CUR_VALUE],
+			xiaomi_touch_interfaces.touch_mode[i][GET_DEF_VALUE],
+			xiaomi_touch_interfaces.touch_mode[i][GET_MIN_VALUE],
+			xiaomi_touch_interfaces.touch_mode[i][GET_MAX_VALUE]);
+	}
+
+	return;
+}
+
+static void fts_edge_rejection(bool on, int value)
+{
+	/* the fixed edge_reject is 65 */
+	int ret = 0;
+	u8 edge_of_leftright[4] = {0xc0, 0x01, 0x00, 0x00};
+	u8 edge_of_topbottom[4] = {0xc0, 0x01, 0x01, 0x00};
+	struct fts_hw_platform_data *pdata = NULL;
+
+	if (!fts_info)
+		return;
+	else
+		pdata = fts_info->board;
+
+	if (on) {
+		edge_of_topbottom[3] = value;
+		edge_of_leftright[3] = 0;
+	} else {
+		edge_of_leftright[3] = pdata->edgefilter_leftright_def;
+		edge_of_topbottom[3] = pdata->edgefilter_topbottom_def;
+	}
+
+	ret = fts_write(edge_of_leftright, sizeof(edge_of_leftright) / sizeof(u8));
+	if (ret < OK) {
+		logError(1,
+			 "%s %s: error while writing edge left/right data ERROR %08X\n",
+			 tag, __func__, ret);
+		return;
+	}
+
+	ret = fts_write(edge_of_topbottom, sizeof(edge_of_topbottom) / sizeof(u8));
+	if (ret < OK) {
+		logError(1,
+			 "%s %s: error while writing edge top/bottom data ERROR %08X\n",
+			 tag, __func__, ret);
+		return;
+	}
+	logError(1, "%s %s: on:%d, value:%d\n",
+				 tag, __func__, on, value);
+
+	return;
+}
+
+static void fts_update_grip_mode(void)
+{
+	int i, ret;
+	u8 grip_cmd[9] = {0xc0, 0x08, 0x00,};
+	u8 grip_rcmd[2] = {0xc1, 0x08};
+	u8 grip_value[7] = {0x0,};
+	int temp_value = 0;
+	bool topbottom_edge_filter = false;
+	int direction = 0;
+	struct fts_hw_platform_data *pdata = NULL;
+
+	if (!fts_info)
+		return;
+	else
+		pdata = fts_info->board;
+
+	logError(1,
+			 "%s %s: value:%d\n",
+			 tag, __func__, xiaomi_touch_interfaces.touch_mode[Touch_Edge_Filter][SET_CUR_VALUE]);
+	switch (xiaomi_touch_interfaces.touch_mode[Touch_Edge_Filter][SET_CUR_VALUE]) {
+	case 0:
+		temp_value = 0;
+		break;
+	case 1:
+		temp_value = pdata->edgefilter_area_step1;
+		break;
+	case 2:
+		temp_value = pdata->edgefilter_area_step2;
+		break;
+	case 3:
+		temp_value = pdata->edgefilter_area_step3;
+		break;
+	default:
+		temp_value = 0;
+		logError(1,
+		 "%s %s: no support value %08d\n",
+		 tag, __func__, temp_value);
+		break;
+	}
+
+	direction = xiaomi_touch_interfaces.touch_mode[Touch_Panel_Orientation][SET_CUR_VALUE];
+
+	switch (direction) {
+	case 0:
+	case 2:
+		/* 0 and 180, filter the leftright edge */
+		topbottom_edge_filter = false;
+		xiaomi_touch_interfaces.touch_edge[0] = 0;
+		xiaomi_touch_interfaces.touch_edge[1] = 0x0f;
+		xiaomi_touch_interfaces.touch_edge[2] = 0x00;
+		xiaomi_touch_interfaces.touch_edge[3] = 0;
+		xiaomi_touch_interfaces.touch_edge[4] = 0;
+		xiaomi_touch_interfaces.touch_edge[5] = 0;
+		xiaomi_touch_interfaces.touch_edge[6] = 0;
+		break;
+	case 1:
+		topbottom_edge_filter = true;
+		xiaomi_touch_interfaces.touch_edge[0] = 1;
+		xiaomi_touch_interfaces.touch_edge[1] = 0x0f;
+		xiaomi_touch_interfaces.touch_edge[2] = 0x00;
+		xiaomi_touch_interfaces.touch_edge[3] = temp_value;
+		xiaomi_touch_interfaces.touch_edge[4] = temp_value;
+		xiaomi_touch_interfaces.touch_edge[5] = 0;
+		xiaomi_touch_interfaces.touch_edge[6] = 0;
+		break;
+	case 3:
+		topbottom_edge_filter = true;
+		xiaomi_touch_interfaces.touch_edge[0] = 1;
+		xiaomi_touch_interfaces.touch_edge[1] = 0x0f;
+		xiaomi_touch_interfaces.touch_edge[2] = 0x00;
+		xiaomi_touch_interfaces.touch_edge[3] = 0;
+		xiaomi_touch_interfaces.touch_edge[4] = 0;
+		xiaomi_touch_interfaces.touch_edge[5] = temp_value;
+		xiaomi_touch_interfaces.touch_edge[6] = temp_value;
+		break;
+	default:
+			/* Dont't support */
+			break;
+	};
+
+	if (!xiaomi_touch_interfaces.touch_mode[Touch_Game_Mode][GET_CUR_VALUE] || !topbottom_edge_filter) {
+		logError(1,
+			 "%s %s: touch game mode off or portrait\n",
+			 tag, __func__);
+		fts_edge_rejection(false, 0);
+	}
+
+	xiaomi_touch_interfaces.touch_mode[Touch_Edge_Filter][GET_CUR_VALUE] =
+		xiaomi_touch_interfaces.touch_mode[Touch_Edge_Filter][SET_CUR_VALUE];
+
+	for (i = 0; i < 7; i++) {
+		grip_cmd[2 + i] = (u8)(xiaomi_touch_interfaces.touch_edge[i]);
+	}
+	logError(1,
+		"%s %s: write grip:0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x\n",
+		tag, __func__, grip_cmd[0], grip_cmd[1], grip_cmd[2], grip_cmd[3],
+		grip_cmd[4], grip_cmd[5], grip_cmd[6], grip_cmd[7], grip_cmd[8]);
+
+	ret = fts_write(grip_cmd, sizeof(grip_cmd) / sizeof(u8));
+	if (ret < OK) {
+		logError(1,
+			 "%s %s: error while writing touchmode data ERROR %08X\n",
+			 tag, __func__, ret);
+		return;
+	}
+	msleep(10);
+	ret = fts_writeRead(grip_rcmd, sizeof(grip_rcmd) / sizeof(u8), grip_value,
+			     sizeof(grip_value) / sizeof(u8));
+	if (ret < OK) {
+		logError(1,
+			 "%s %s: error while reading edge filter data ERROR %08X\n",
+			 tag, __func__, ret);
+		return;
+	}
+	logError(1,
+		"%s %s: read grip:0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x\n",
+		tag, __func__, grip_value[0], grip_value[1], grip_value[2], grip_value[3],
+		grip_value[4], grip_value[5], grip_value[6]);
+
+	logError(1,
+		 "%s %s: grip enable:%d, direction:%d\n",
+		 tag, __func__, grip_value[0], direction);
+
+	return;
+}
+
+static void fts_update_touchmode_data(void)
+{
+	bool update = false;
+	int i, j, ret = 0;
+	u8 set_cmd[9] = {0xc0, 0x05, 0,};
+	u8 get_cmd[2] = {0xc1, 0x05};
+	u8 get_value[7] = {0x0,};
+	int temp_value = 0;
+
+	ret = wait_event_interruptible_timeout(fts_info->wait_queue, !(fts_info->irq_status),  msecs_to_jiffies(500));
+
+	if (ret <= 0) {
+		logError(1, "%s %s: wait touch irq status timeout\n", tag, __func__);
+		return;
+	}
+
+	mutex_lock(&fts_info->cmd_update_mutex);
+	for (i = 0; i < Touch_Mode_NUM; i++) {
+		if (xiaomi_touch_interfaces.touch_mode[i][GET_CUR_VALUE] !=
+				xiaomi_touch_interfaces.touch_mode[i][SET_CUR_VALUE]) {
+
+			xiaomi_touch_interfaces.touch_mode[i][GET_CUR_VALUE] =
+				xiaomi_touch_interfaces.touch_mode[i][SET_CUR_VALUE];
+			logError(1, "%s %s: mode:%d changed, value:%d\n", tag, __func__, i,
+				xiaomi_touch_interfaces.touch_mode[i][SET_CUR_VALUE]);
+			update = true;
+		}
+	}
+
+	if (update) {
+		for (j = 2; j < sizeof(set_cmd) / sizeof(u8); j++) {
+			if (j - 2 == Touch_UP_THRESHOLD ||
+				j - 2 == Touch_Tolerance)
+				temp_value = xiaomi_touch_interfaces.touch_mode[j - 2][GET_MAX_VALUE] -
+					xiaomi_touch_interfaces.touch_mode[j - 2][GET_CUR_VALUE] + xiaomi_touch_interfaces.touch_mode[j - 2][GET_MIN_VALUE];
+			else
+				temp_value = (xiaomi_touch_interfaces.touch_mode[j - 2][GET_CUR_VALUE]);
+
+			set_cmd[j] = (u8)temp_value;
+		}
+		logError(1,
+			"%s %s: write game:0x%x, 0x%x, %d, %d, %d, %d, %d, %d, %d\n",
+			tag, __func__, set_cmd[0], set_cmd[1], set_cmd[2], set_cmd[3],
+			set_cmd[4], set_cmd[5], set_cmd[6], set_cmd[7], set_cmd[8]);
+
+		ret = fts_write(set_cmd, sizeof(set_cmd) / sizeof(u8));
+		if (ret < OK) {
+			logError(1,
+				 "%s %s: error while writing touchmode data ERROR %08X\n",
+				 tag, __func__, ret);
+			goto end;
+		}
+
+		ret = fts_writeRead(get_cmd, sizeof(get_cmd) / sizeof(u8), get_value,
+					 sizeof(get_value) / sizeof(u8));
+		if (ret < OK) {
+			logError(1,
+				 "%s %s: error while reading touchmode data ERROR %08X\n",
+				 tag, __func__, ret);
+			goto end;
+		}
+
+		logError(1,
+			"%s %s: read game:%d, active_mode:%d, up_threshold:%d, landlock:%d, wgh:%d, %d, %d\n",
+			tag, __func__, get_value[0], get_value[1], get_value[2], get_value[3],
+			get_value[4], get_value[5], get_value[6]);
+		fts_update_grip_mode();
+	} else {
+		logError(1, "%s %s: no update\n", tag, __func__);
+	}
+
+end:
+	mutex_unlock(&fts_info->cmd_update_mutex);
+	return;
+}
+
+static void fts_cmd_update_work(struct work_struct *work)
+{
+	fts_update_touchmode_data();
+
+	return;
+}
+
+static int fts_set_cur_value(int mode, int value)
+{
+
+	if (mode < Touch_Mode_NUM && mode >= 0) {
+
+		xiaomi_touch_interfaces.touch_mode[mode][SET_CUR_VALUE] = value;
+
+		if (xiaomi_touch_interfaces.touch_mode[mode][SET_CUR_VALUE] >
+			xiaomi_touch_interfaces.touch_mode[mode][GET_MAX_VALUE]) {
+
+			xiaomi_touch_interfaces.touch_mode[mode][SET_CUR_VALUE] =
+				xiaomi_touch_interfaces.touch_mode[mode][GET_MAX_VALUE];
+
+		} else if (xiaomi_touch_interfaces.touch_mode[mode][SET_CUR_VALUE] <
+			xiaomi_touch_interfaces.touch_mode[mode][GET_MIN_VALUE]) {
+
+		xiaomi_touch_interfaces.touch_mode[mode][SET_CUR_VALUE] =
+				xiaomi_touch_interfaces.touch_mode[mode][GET_MIN_VALUE];
+		}
+	} else {
+		logError(1, "%s %s, don't support\n", tag, __func__);
+	}
+	logError(1, "%s %s, mode:%d, value:%d\n", tag, __func__, mode, value);
+
+	queue_work(fts_info->touch_feature_wq, &fts_info->cmd_update_work);
+
+	return 0;
+}
+
+static int fts_get_mode_value(int mode, int value_type)
+{
+	int value = -1;
+
+	if (mode < Touch_Mode_NUM && mode >= 0)
+		value = xiaomi_touch_interfaces.touch_mode[mode][value_type];
+	else
+		logError(1, "%s, %s, don't support\n", tag, __func__);
+
+	return value;
+}
+
+static int fts_get_mode_all(int mode, int *value)
+{
+	if (mode < Touch_Mode_NUM && mode >= 0) {
+		value[0] = xiaomi_touch_interfaces.touch_mode[mode][GET_CUR_VALUE];
+		value[1] = xiaomi_touch_interfaces.touch_mode[mode][GET_DEF_VALUE];
+		value[2] = xiaomi_touch_interfaces.touch_mode[mode][GET_MIN_VALUE];
+		value[3] = xiaomi_touch_interfaces.touch_mode[mode][GET_MAX_VALUE];
+	} else {
+		logError(1, "%s %s, don't support\n", tag, __func__);
+	}
+	logError(1, "%s %s, mode:%d, value:%d:%d:%d:%d\n", tag, __func__, mode, value[0],
+					value[1], value[2], value[3]);
+
+	return 0;
+}
+
+static int fts_reset_mode(int mode)
+{
+	int i = 0;
+
+	if (mode < Touch_Mode_NUM && mode > 0) {
+		xiaomi_touch_interfaces.touch_mode[mode][SET_CUR_VALUE] =
+			xiaomi_touch_interfaces.touch_mode[mode][GET_DEF_VALUE];
+	} else if (mode == 0) {
+		for (i = 0; i < Touch_Mode_NUM; i++) {
+			xiaomi_touch_interfaces.touch_mode[i][SET_CUR_VALUE] =
+			xiaomi_touch_interfaces.touch_mode[i][GET_DEF_VALUE];
+		}
+	} else {
+		logError(1, "%s %s, don't support\n", tag, __func__);
+	}
+
+	logError(1, "%s %s, mode:%d\n", tag, __func__, mode);
+
+	queue_work(fts_info->event_wq, &fts_info->cmd_update_work);
+
+	return 0;
+}
+#endif
+
+#ifdef CONFIG_TOUCHSCREEN_XIAOMI_TOUCHFEATURE_SENSOR
+static int fts_finger_report_disable(struct fts_ts_info *info, bool enable)
+{
+	u8 cmd[4] = {0xc0, 0x09, 0x00, 0x00};
+
+	if (enable)
+		cmd[2] = 0x01;
+	else
+		cmd[2] = 0x00;
+	return fts_write(cmd, ARRAY_SIZE(cmd));
+}
+
+static int fts_p_sensor_cmd(int on)
+{
+	int ret = 0;
+	u8 cmd_on[] = {0xa0, 0x00, 0x05};
+	u8 cmd_off[] = {0xa0, 0x00, 0x01};
+	u8 hover_on[] = {0xc0, 0x03, 0x01, 0x24};
+	u8 hover_off[] = {0xc0, 0x03, 0x00, 0x00};
+
+	if (on) {
+		ret = fts_write_dma_safe(cmd_on, sizeof(cmd_on));
+		ret = fts_write_dma_safe(hover_on, sizeof(hover_on));
+	} else {
+		ret = fts_write_dma_safe(cmd_off, sizeof(cmd_off));
+		ret = fts_write_dma_safe(hover_off, sizeof(hover_off));
+	}
+
+	if (ret < OK) {
+		logError(1, "%s %s: write ear det cmd on...ERROR %08X !\n", tag,
+			 __func__, ret);
+		return -EINVAL;
+	}
+	logError(1, "%s %s: on:%d\n", tag, __func__, on);
+	if (!on) {
+		ret = fts_finger_report_disable(fts_info, false);
+		if (ret < OK)
+				logError(1, "%s %s: enable finger report error\n", tag, __func__);
+		else
+				logError(1, "%s %s: enable finger report\n", tag, __func__);
+	}
+	return 0;
+}
+
+static int fts_p_sensor_write(int on)
+{
+	int ret = 0;
+
+	fts_info->p_sensor_switch = on;
+	if (fts_info->sensor_sleep) {
+		fts_info->p_sensor_changed = false;
+		return 0;
+	}
+	ret = fts_p_sensor_cmd(on);
+
+	if (!ret)
+		fts_info->p_sensor_changed = true;
+	return ret;
+}
+
+static int fts_palm_sensor_cmd(int on)
+{
+	int ret;
+	u8 cmd_on[] = {0xc0, 0x07, 0x01};
+	u8 cmd_off[] = {0xc0, 0x07, 0x00};
+
+	if (on) {
+		ret = fts_write(cmd_on, sizeof(cmd_on));
+	} else {
+		ret = fts_write(cmd_off, sizeof(cmd_off));
+	}
+
+	if (ret < OK) {
+		logError(1, "%s %s: write anti mis-touch cmd on...ERROR %08X !\n", tag,
+			 __func__, ret);
+		return -EINVAL;
+	}
+	logError(1, "%s %s %d\n", tag, __func__, on);
+
+	return 0;
+}
+
+static int fts_palm_sensor_write(int value)
+{
+	int ret = 0;
+	fts_info->palm_sensor_switch = value;
+
+	if (fts_info->sensor_sleep) {
+		fts_info->palm_sensor_changed = false;
+		return 0;
+	}
+	ret = fts_palm_sensor_cmd(value);
+
+	if (!ret)
+		fts_info->palm_sensor_changed = true;
+
+	return ret;
+}
+#endif
+#endif
+
+#ifdef CONFIG_SECURE_TOUCH
+static void fts_secure_touch_notify (struct fts_ts_info *info)
+{
+	/*might sleep*/
+	sysfs_notify(&info->dev->kobj, NULL, "secure_touch");
+	logError(1, "%s %s SECURE_NOTIFY:notify secure_touch\n", tag, __func__);
+}
+
+static int fts_secure_stop(struct fts_ts_info *info, bool block)
+{
+	struct fts_secure_info *scr_info = info->secure_info;
+
+	logError(1, "%s %s SECURE_STOP: block = %d\n", tag, __func__, (int)block);
+	if (atomic_read(&scr_info->st_enabled) == 0) {
+		logError(1, "%s %s secure touch is already disabled\n", tag, __func__);
+		return OK;
+	}
+
+	atomic_set(&scr_info->st_pending_irqs, -1);
+	fts_secure_touch_notify(info);
+	if (block) {
+		if (wait_for_completion_interruptible(&scr_info->st_powerdown) == -ERESTARTSYS) {
+			logError(1, "%s %s SECURE_STOP:st_powerdown be interrupted\n",
+				tag, __func__);
+		} else {
+			logError(1, "%s %s SECURE_STOP:st_powerdown be completed\n", tag, __func__);
+		}
+	}
+	return OK;
+}
+
+static void fts_secure_work(struct fts_secure_info *scr_info)
+{
+	struct fts_ts_info *info = (struct fts_ts_info *)scr_info->fts_info;
+
+
+	fts_secure_touch_notify(info);
+	atomic_set(&scr_info->st_1st_complete, 1);
+	if (wait_for_completion_interruptible(&scr_info->st_irq_processed) == -ERESTARTSYS) {
+		logError(1, "%s %s SECURE_FILTER:st_irq_processed be interrupted\n", tag, __func__);
+	} else {
+		logError(1, "%s %s SECURE_FILTER:st_irq_processed be completed\n", tag, __func__);
+	}
+
+	fts_enableInterrupt();
+	logError(1, "%s %s SECURE_FILTER:enable irq\n", tag, __func__);
+}
+
+/*
+static void fts_palm_store_delay(struct fts_secure_info *scr_info)
+{
+	int ret;
+	struct fts_ts_info *info = scr_info->fts_info;
+
+	logError(1, "%s %s IN", tag, __func__);
+	ret = fts_palm_sensor_cmd(scr_info->scr_delay.palm_value);
+	if (!ret)
+		info->palm_sensor_changed = true;
+	logError(1, "%s %s OUT", tag, __func__);
+}
+
+
+static void fts_flush_delay_task(struct fts_secure_info *scr_info)
+{
+	if (scr_info->scr_delay.palm_pending) {
+		fts_palm_store_delay(scr_info);
+		scr_info->scr_delay.palm_pending = false;
+	}
+}
+*/
+
+static int fts_secure_filter_interrupt(struct fts_ts_info *info)
+{
+	struct fts_secure_info *scr_info = info->secure_info;
+
+	/*inited and enable first*/
+	if (!scr_info->secure_inited || atomic_read(&scr_info->st_enabled) == 0) {
+		return -EPERM;
+	}
+
+	fts_disableInterruptNoSync();
+	logError(1, "%s %s SECURE_FILTER:disable irq\n", tag, __func__);
+	/*check and change irq pending state
+	 *change irq pending here, secure_touch_show, secure_touch_enable_store
+	 *completion st_irq_processed at secure_touch_show, secure_touch_enable_stroe
+	 */
+	logError(1, "%s %s SECURE_FILTER:st_pending_irqs = %d\n",
+		tag, __func__, atomic_read(&scr_info->st_pending_irqs));
+	if (atomic_cmpxchg(&scr_info->st_pending_irqs, 0, 1) == 0) {
+		fts_secure_work(scr_info);
+		logError(1, "%s %s SECURE_FILTER:secure_work return\n", tag, __func__);
+	}
+
+	return 0;
+}
+
+static ssize_t fts_secure_touch_enable_show (struct device *dev,
+										struct device_attribute *attr, char *buf)
+{
+	struct fts_ts_info *info = dev_get_drvdata(dev);
+	struct fts_secure_info *scr_info = info->secure_info;
+
+	logError(1, "%s %s SECURE_TOUCH_ENABLE[R]:st_enabled = %d\n", tag, __func__, atomic_read(&scr_info->st_enabled));
+	return scnprintf(buf, PAGE_SIZE, "%d", atomic_read(&scr_info->st_enabled));
+}
+
+/* 	echo 0 > secure_touch_enable to disable secure touch
+ * 	echo 1 > secure_touch_enable to enable secure touch
+ */
+static ssize_t fts_secure_touch_enable_store (struct device *dev, struct device_attribute *attr,
+				const char *buf, size_t count)
+{
+	int ret;
+	unsigned long value;
+	struct fts_ts_info *info = dev_get_drvdata(dev);
+	struct fts_secure_info *scr_info = info->secure_info;
+
+	atomic_set(&scr_info->st_1st_complete, 0);
+	logError(1, "%s %s SECURE_TOUCH_ENABLE[W]:st_1st_complete=0\n", tag, __func__);
+	logError(1, "%s %s SECURE_TOUCH_ENABLE[W]:parse parameter\n", tag, __func__);
+	/*check and get cmd*/
+	if (count > 2)
+		return -EINVAL;
+	ret = kstrtoul(buf, 10, &value);
+	if (ret != 0)
 		return ret;
 	}
 	return count;
@@ -2267,7 +3063,10 @@ static ssize_t fts_grip_area_store(struct device *dev,
 	}
 	return count;
 }
+#endif
 
+static DEVICE_ATTR(gesture_enable, (S_IRUGO | S_IWUSR),
+		   fts_gesture_mask_show, fts_gesture_enable_store);
 static DEVICE_ATTR(fts_lockdown, (S_IRUGO | S_IWUSR | S_IWGRP),
 		   fts_lockdown_show, fts_lockdown_store);
 static DEVICE_ATTR(fwupdate, (S_IRUGO | S_IWUSR | S_IWGRP), fts_fwupdate_show,
@@ -2375,7 +3174,10 @@ static struct attribute *fts_attr_group[] = {
 	&dev_attr_doze_time.attr,
 	&dev_attr_grip_enable.attr,
 	&dev_attr_grip_area.attr,
-
+	&dev_attr_gesture_enable.attr,
+#ifdef CONFIG_TOUCHSCREEN_XIAOMI_TOUCHFEATURE_GAMEMODE
+	&dev_attr_touchgame.attr,
+#endif
 	NULL,
 };
 
@@ -4405,6 +5207,34 @@ static void fts_switch_mode_work(struct work_struct *work)
 	}
 }
 
+static ssize_t fts_input_symlink(struct fts_ts_info *info) {
+	char *driver_path;
+	int ret = 0;
+
+	if (info->input_proc) {
+		proc_remove(info->input_proc);
+		info->input_proc = NULL;
+	}
+
+	driver_path = kzalloc(PATH_MAX, GFP_KERNEL);
+	if (!driver_path) {
+		return -ENOMEM;
+	}
+
+	sprintf(driver_path, "/sys%s",
+			kobject_get_path(&info->input_dev->dev.kobj, GFP_KERNEL));
+
+	pr_info("%s: driver_path=%s\n", __func__, driver_path);
+	info->input_proc = proc_symlink(PROC_SYMLINK_PATH, NULL, driver_path);
+	if (!info->input_proc) {
+		ret = -ENOMEM;
+	}
+
+	kfree(driver_path);
+
+	return ret;
+}
+
 static int fts_input_event(struct input_dev *dev, unsigned int type,
 			   unsigned int code, int value)
 {
@@ -5012,6 +5842,8 @@ static int fts_probe(struct spi_device *client)
 	info->input_dev->event = fts_input_event;
 	input_set_drvdata(info->input_dev, info);
 
+	info->input_proc = NULL;
+
 	__set_bit(EV_SYN, info->input_dev->evbit);
 	__set_bit(EV_KEY, info->input_dev->evbit);
 	__set_bit(EV_ABS, info->input_dev->evbit);
@@ -5092,6 +5924,11 @@ static int fts_probe(struct spi_device *client)
 		goto ProbeErrorExit_5_1;
 	}
 
+	retval = fts_input_symlink(info);
+	if (retval < 0) {
+		logError(1, "%s ERROR: fts_ts_info is NULL\n", tag);
+	}
+
 	skip_5_1 = 1;
 	/* track slots */
 	info->touch_id = 0;
@@ -5167,7 +6004,7 @@ static int fts_probe(struct spi_device *client)
 	logError(0, "%s SET Device File Nodes: \n", tag);
 	/* sysfs stuff */
 	info->attrs.attrs = fts_attr_group;
-	error = sysfs_create_group(&client->dev.kobj, &info->attrs);
+	error = sysfs_create_group(&info->input_dev->dev.kobj, &info->attrs);
 	if (error) {
 		logError(1, "%s ERROR: Cannot create sysfs structure!\n", tag);
 		error = -ENODEV;
diff --git a/drivers/input/touchscreen/fts_521/fts.h b/drivers/input/touchscreen/fts_521/fts.h
index faa7de06350d..5de5b31ffd5f 100644
--- a/drivers/input/touchscreen/fts_521/fts.h
+++ b/drivers/input/touchscreen/fts_521/fts.h
@@ -284,6 +284,25 @@ struct fts_ts_info {
 	struct dentry *debugfs;
 #endif
 	bool lockdown_is_ok;
+	struct completion tp_reset_completion;
+	atomic_t system_is_resetting;
+	unsigned int fod_status;
+	struct proc_dir_entry *input_proc;
+	bool irq_status;
+#ifdef CONFIG_TOUCHSCREEN_XIAOMI_TOUCHFEATURE
+#ifdef CONFIG_TOUCHSCREEN_XIAOMI_TOUCHFEATURE_SENSOR
+	bool p_sensor_switch;
+	bool p_sensor_changed;
+
+	int palm_sensor_switch;
+	bool palm_sensor_changed;
+#endif
+#ifdef CONFIG_TOUCHSCREEN_XIAOMI_TOUCHFEATURE_GAMEMODE
+	wait_queue_head_t wait_queue;
+#endif
+#endif
+	bool dev_pm_suspend;
+	struct completion dev_pm_suspend_completion;
 };
 
 struct fts_mode_switch {
diff --git a/drivers/input/touchscreen/nt36xxx/nt36xxx.c b/drivers/input/touchscreen/nt36xxx/nt36xxx.c
index 76a3776bb1fc..8049c8afe199 100644
--- a/drivers/input/touchscreen/nt36xxx/nt36xxx.c
+++ b/drivers/input/touchscreen/nt36xxx/nt36xxx.c
@@ -59,6 +59,8 @@ extern void Boot_Update_Firmware(struct work_struct *work);
 static int nvt_drm_notifier_callback(struct notifier_block *self, unsigned long event, void *data);
 #endif
 
+#define PROC_SYMLINK_PATH "touchpanel"
+
 #if TOUCH_KEY_NUM > 0
 const uint16_t touch_key_array[TOUCH_KEY_NUM] = {
 	KEY_BACK,
@@ -1411,17 +1413,68 @@ static ssize_t nvt_panel_display_show(struct device *dev,
 	return snprintf(buf, PAGE_SIZE, "%c\n", ts->lockdown_info[1]);
 }
 
+static ssize_t nvt_panel_gesture_enable_show(struct device *dev,
+				     struct device_attribute *attr, char *buf)
+{
+        const char c = ts->gesture_enabled ? '1' : '0';
+        return sprintf(buf, "%c\n", c);
+}
+
+static ssize_t nvt_panel_gesture_enable_store(struct device *dev,
+				     struct device_attribute *attr, const char *buf, size_t count)
+{
+	int i;
+
+	if (sscanf(buf, "%u", &i) == 1 && i < 2) {
+		ts->gesture_enabled = i;
+		return count;
+	} else {
+		dev_dbg(dev, "enable_dt2w write error\n");
+		return -EINVAL;
+	}
+}
+
 static DEVICE_ATTR(panel_vendor, (S_IRUGO), nvt_panel_vendor_show, NULL);
 static DEVICE_ATTR(panel_color, (S_IRUGO), nvt_panel_color_show, NULL);
 static DEVICE_ATTR(panel_display, (S_IRUGO), nvt_panel_display_show, NULL);
+static DEVICE_ATTR(gesture_enable, S_IWUSR | S_IRUSR,
+		nvt_panel_gesture_enable_show, nvt_panel_gesture_enable_store);
 
 static struct attribute *nvt_attr_group[] = {
 	&dev_attr_panel_vendor.attr,
 	&dev_attr_panel_color.attr,
 	&dev_attr_panel_display.attr,
+	&dev_attr_gesture_enable.attr,
 	NULL,
 };
 
+static ssize_t novatek_input_symlink(struct nvt_ts_data *ts) {
+	char *driver_path;
+	int ret = 0;
+	if (ts->input_proc) {
+		proc_remove(ts->input_proc);
+		ts->input_proc = NULL;
+	}
+	driver_path = kzalloc(PATH_MAX, GFP_KERNEL);
+	if (!driver_path) {
+		pr_err("%s: failed to allocate memory\n", __func__);
+		return -ENOMEM;
+	}
+
+	sprintf(driver_path, "/sys%s",
+			kobject_get_path(&ts->client->dev.kobj, GFP_KERNEL));
+
+	pr_err("%s: driver_path=%s\n", __func__, driver_path);
+
+	ts->input_proc = proc_symlink(PROC_SYMLINK_PATH, NULL, driver_path);
+
+	if (!ts->input_proc) {
+		ret = -ENOMEM;
+	}
+	kfree(driver_path);
+	return ret;
+}
+
 /*******************************************************
 Description:
 	Novatek touchscreen driver probe function.
@@ -1445,6 +1498,7 @@ static int32_t nvt_ts_probe(struct i2c_client *client, const struct i2c_device_i
 	}
 
 	ts->client = client;
+	ts->input_proc = NULL;
 	i2c_set_clientdata(client, ts);
 
 	//---parse dts---
@@ -1627,6 +1681,11 @@ static int32_t nvt_ts_probe(struct i2c_client *client, const struct i2c_device_i
 		NVT_ERR("Cannot create sysfs structure!\n");
 	}
 
+	ret = novatek_input_symlink(ts);
+	if (ret < 0) {
+		NVT_ERR("Failed to symlink input device!\n");
+	}
+
 #if NVT_TOUCH_EXT_PROC
 	ret = nvt_extra_proc_init();
 	if (ret != 0) {
diff --git a/drivers/input/touchscreen/nt36xxx/nt36xxx.h b/drivers/input/touchscreen/nt36xxx/nt36xxx.h
index 96c3b590db2e..89b8c247df2d 100644
--- a/drivers/input/touchscreen/nt36xxx/nt36xxx.h
+++ b/drivers/input/touchscreen/nt36xxx/nt36xxx.h
@@ -172,6 +172,7 @@ struct nvt_ts_data {
 	struct work_struct resume_work;
 	struct workqueue_struct *event_wq;
 	struct completion dev_pm_suspend_completion;
+	struct proc_dir_entry *input_proc;
 #ifdef NVT_TOUCH_COUNT_DUMP
 	struct class *nvt_tp_class;
 	struct device *nvt_touch_dev;
diff --git a/drivers/input/touchscreen/synaptics_dsx_force/synaptics_dsx_core.c b/drivers/input/touchscreen/synaptics_dsx_force/synaptics_dsx_core.c
index fb41c951813c..13e1b0f54d4e 100644
--- a/drivers/input/touchscreen/synaptics_dsx_force/synaptics_dsx_core.c
+++ b/drivers/input/touchscreen/synaptics_dsx_force/synaptics_dsx_core.c
@@ -33,6 +33,7 @@
 
 #include <linux/kernel.h>
 #include <linux/module.h>
+#include <linux/proc_fs.h>
 #include <linux/slab.h>
 #include <linux/interrupt.h>
 #include <linux/delay.h>
@@ -64,6 +65,8 @@
 #define INPUT_PHYS_NAME "synaptics_dsx/touch_input"
 #define STYLUS_PHYS_NAME "synaptics_dsx/stylus"
 
+#define PROC_SYMLINK_PATH "touchpanel"
+
 #define VIRTUAL_KEY_MAP_FILE_NAME "virtualkeys." PLATFORM_DRIVER_NAME
 
 #ifdef KERNEL_ABOVE_2_6_38
@@ -3978,6 +3981,36 @@ static int synaptics_rmi4_input_event(struct input_dev *dev,
 	return 0;
 }
 
+static ssize_t synaptics_rmi4_input_symlink(struct synaptics_rmi4_data *rmi4_data) {
+	char *driver_path;
+	int ret = 0;
+
+	if (rmi4_data->input_proc) {
+		proc_remove(rmi4_data->input_proc);
+		rmi4_data->input_proc = NULL;
+	}
+
+	driver_path = kzalloc(PATH_MAX, GFP_KERNEL);
+	if (!driver_path) {
+		pr_err("%s: failed to allocate memory\n", __func__);
+		return -ENOMEM;
+	}
+
+	sprintf(driver_path, "/sys%s",
+			kobject_get_path(&rmi4_data->input_dev->dev.kobj, GFP_KERNEL));
+
+	pr_debug("%s: driver_path=%s\n", __func__, driver_path);
+
+	rmi4_data->input_proc = proc_symlink(PROC_SYMLINK_PATH, NULL, driver_path);
+	if (!rmi4_data->input_proc) {
+		ret = -ENOMEM;
+	}
+
+	kfree(driver_path);
+
+	return ret;
+}
+
 static int synaptics_rmi4_set_input_dev(struct synaptics_rmi4_data *rmi4_data)
 {
 	int retval;
@@ -4034,6 +4067,13 @@ static int synaptics_rmi4_set_input_dev(struct synaptics_rmi4_data *rmi4_data)
 	if (!rmi4_data->stylus_enable)
 		return 0;
 
+	retval = synaptics_rmi4_input_symlink(rmi4_data);
+	if (retval < 0) {
+		dev_err(rmi4_data->pdev->dev.parent,
+				"%s: Failed to symlink input device\n",
+				__func__);
+	}
+
 	rmi4_data->stylus_dev = input_allocate_device();
 	if (rmi4_data->stylus_dev == NULL) {
 		dev_err(rmi4_data->pdev->dev.parent,
@@ -4919,6 +4959,7 @@ static int synaptics_rmi4_probe(struct platform_device *pdev)
 	rmi4_data->irq_enabled = false;
 	rmi4_data->fingers_on_2d = false;
 	rmi4_data->wakeup_en = false;
+	rmi4_data->input_proc = NULL;
 
 	rmi4_data->reset_device = synaptics_rmi4_reset_device;
 	rmi4_data->irq_enable = synaptics_rmi4_irq_enable;
diff --git a/drivers/input/touchscreen/synaptics_dsx_force/synaptics_dsx_core.h b/drivers/input/touchscreen/synaptics_dsx_force/synaptics_dsx_core.h
index 31e12a2bb84f..963aeeb57480 100644
--- a/drivers/input/touchscreen/synaptics_dsx_force/synaptics_dsx_core.h
+++ b/drivers/input/touchscreen/synaptics_dsx_force/synaptics_dsx_core.h
@@ -434,6 +434,8 @@ struct synaptics_rmi4_data {
 	struct clk *core_clk;
 	struct clk *iface_clk;
 #endif
+	bool palm_sensor_changed;
+	struct proc_dir_entry *input_proc;
 };
 
 struct synaptics_dsx_bus_access {

diff --git a/drivers/input/touchscreen/synaptics_dsx_force/synaptics_dsx_core.c b/drivers/input/touchscreen/synaptics_dsx_force/synaptics_dsx_core.c
index 13e1b0f54d4e..c372ac0ed462 100644
--- a/drivers/input/touchscreen/synaptics_dsx_force/synaptics_dsx_core.c
+++ b/drivers/input/touchscreen/synaptics_dsx_force/synaptics_dsx_core.c
@@ -229,10 +229,10 @@ static ssize_t synaptics_rmi4_0dbutton_store(struct device *dev,
 static ssize_t synaptics_rmi4_suspend_store(struct device *dev,
 		struct device_attribute *attr, const char *buf, size_t count);
 
-static ssize_t synaptics_rmi4_wake_gesture_show(struct device *dev,
+static ssize_t synaptics_rmi4_gesture_enable_show(struct device *dev,
 		struct device_attribute *attr, char *buf);
 
-static ssize_t synaptics_rmi4_wake_gesture_store(struct device *dev,
+static ssize_t synaptics_rmi4_gesture_enable_store(struct device *dev,
 		struct device_attribute *attr, const char *buf, size_t count);
 
 static ssize_t synaptics_rmi4_irq_enable_show(struct device *dev,
@@ -764,9 +764,9 @@ static struct device_attribute attrs[] = {
 	__ATTR(suspend, S_IWUSR,
 			synaptics_rmi4_show_error,
 			synaptics_rmi4_suspend_store),
-	__ATTR(wake_gesture, (S_IRUGO | S_IWUSR),
-			synaptics_rmi4_wake_gesture_show,
-			synaptics_rmi4_wake_gesture_store),
+	__ATTR(gesture_enable, (S_IRUGO | S_IWUSR),
+			synaptics_rmi4_gesture_enable_show,
+			synaptics_rmi4_gesture_enable_store),
 	__ATTR(irq_enable, (S_IRUGO | S_IWUSR),
 			synaptics_rmi4_irq_enable_show,
 			synaptics_rmi4_irq_enable_store),
@@ -1161,7 +1161,7 @@ static ssize_t synaptics_rmi4_suspend_store(struct device *dev,
 	return count;
 }
 
-static ssize_t synaptics_rmi4_wake_gesture_show(struct device *dev,
+static ssize_t synaptics_rmi4_gesture_enable_show(struct device *dev,
 		struct device_attribute *attr, char *buf)
 {
 	struct synaptics_rmi4_data *rmi4_data = dev_get_drvdata(dev);
@@ -1170,7 +1170,7 @@ static ssize_t synaptics_rmi4_wake_gesture_show(struct device *dev,
 			rmi4_data->enable_wakeup_gesture);
 }
 
-static ssize_t synaptics_rmi4_wake_gesture_store(struct device *dev,
+static ssize_t synaptics_rmi4_gesture_enable_store(struct device *dev,
 		struct device_attribute *attr, const char *buf, size_t count)
 {
 	unsigned int input;
